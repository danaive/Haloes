// Generated by CoffeeScript 1.10.0
(function() {
  $(function() {
    var score;
    $('a[href$="group/"]').addClass('current');
    score = [];
    $.ajax({
      url: '/person/get-score/',
      type: 'post',
      dataType: 'json',
      data: {
        username: 'danlei'
      },
      success: function(data) {
        var _, capacity, color, highlight, i, label, pctx, pdata, rctx, rdata, rgba;
        score = data.score;
        label = ['PWN', 'REVERSE', 'WEB', 'CRYPTO', 'MISC'];
        color = ['#3BAFDA', '#8CC152', '#ED5565', '#37BC9B', '#FFCE54'];
        highlight = ['#4FC3EE', '#A0D566', '#FF6979', '#4BD0AF', '#FFE268'];
        pdata = (function() {
          var j, len, results;
          results = [];
          for (i = j = 0, len = label.length; j < len; i = ++j) {
            _ = label[i];
            results.push({
              label: label[i],
              value: score[i],
              color: color[i],
              highlight: highlight[i]
            });
          }
          return results;
        })();
        pctx = $("#pieChart").get(0).getContext('2d');
        new Chart(pctx).Pie(pdata, {
          animateScale: true
        });
        capacity = data.capacity;
        rgba = ['rgba(137,114,158,1)', 'rgba(151,187,205,1)'];
        rdata = {
          labels: label,
          datasets: (function() {
            var j, len, results;
            results = [];
            for (i = j = 0, len = capacity.length; j < len; i = ++j) {
              _ = capacity[i];
              results.push({
                label: capacity[i].name,
                fillColor: rgba[i].slice(0, -2) + '0.2)',
                pointColor: rgba[i],
                pointStrokeColor: '#fff',
                pointHighlightFill: '#fff',
                pointHighlightStroke: rgba[i],
                data: capacity[i].score
              });
            }
            return results;
          })()
        };
        rctx = $('#radarChart').get(0).getContext('2d');
        return new Chart(rctx).Radar(rdata, {
          scaleOverride: true,
          scaleSteps: 5,
          scaleStepWidth: 25,
          scaleStartValue: -25
        });
      }
    });
    $('#deadline').datetimepicker({
      format: 'yyyy-mm-dd',
      autoclose: true,
      minView: 2,
      maxView: 2
    });
    $('a[href^="#assign-"]').on('click', function() {
      var name, pk;
      pk = ($(this).attr('href')).substr(8);
      name = $(this).text();
      $('#assign').attr('data-content', pk);
      return $('#assign').text(name);
    });
    $('#newTaskBtn').on('click', function() {
      $('#taskContent').val('');
      $('#deadline').val('');
      $('#assign').text('Unassigned');
      $('#assign').attr('data-content', 0);
      return $('#newTask').fadeToggle();
    });
    $('#taskAssign').on('click', function() {
      var data;
      if ($('#taskContent').val()) {
        data = {
          content: $('#taskContent').val(),
          assign: $('#assign').data('content')
        };
        if ($('#deadline').val()) {
          data.deadline = $('#deadline').val();
        }
        return $.ajax({
          url: 'newTask/',
          type: 'post',
          dataType: 'json',
          data: data,
          success: function(data) {
            if (data.msg === 'okay') {
              return console.log(data.msg);
            }
          }
        });
      }
    });
    $('#taskCancel').on('click', function() {
      return $('#newTask').fadeOut();
    });
    $('ul.task').hover(function() {
      return $(this).children().last().fadeIn('fast');
    }, function() {
      return $(this).children().last().fadeOut('fast');
    });
    $('a.doneTask').hover(function() {
      return $(this).find('i.fa-check').fadeIn('fast');
    }, function() {
      return $(this).find('i.fa-check').fadeOut('fast');
    });
    return stickFooter();
  });

}).call(this);
